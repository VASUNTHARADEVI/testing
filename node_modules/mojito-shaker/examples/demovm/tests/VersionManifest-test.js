/*
 * Copyright (c) 2011 Yahoo! Inc. All rights reserved.
 */

YUI.add('VersionManifestTest-tests', function(Y) {
    var suite = new YUITest.TestSuite('VersionManifestTest-tests'),
        vm = require(process.cwd() + '/VersionManifest.js'),
        NUM_FILES = 3,
        A = YUITest.Assert,
        isObj = A.isObject,
        isFunc = A.isFunction,
        isStr = A.isString,
        eq = A.areEqual,
        isTrue = function(val, msg){ return eq(true, val, msg); },
        isFalse = function(val, msg){ return eq(false, val, msg); },
        contains = function(haystack, needle, msg){ return isTrue(haystack.indexOf(needle) !== -1, msg); },
        enc = JSON.stringify;

    suite.add(new YUITest.TestCase({

        name: 'VersionManifestTest user tests',

        setUp: function(type, group) {
            var isApp   = type === 'app',
                type    = isApp ? 'app': 'mojit',
                group   = isApp ? null : (typeof group === 'undefined' ? 'group' : group),
                root    = isApp ? './tests/' : './tests/mojits/' + (group ? group +'/' : '') + 'test',
                exclude = isApp ? 'artifacts|\.server\.|/mojits/' : 'artifacts|\.server\.',
                paths   = isApp ? ['assets'] : [''];
                
            this.manifest = new vm.VersionManifest(root, paths, {
                'group'          : group,
                'projectType'    : type || 'mojit',
                'mojitName'      : 'test',
                'localPrefix'    : '/static',
                'remotePrefix'   : 'http://l.yimg.com/os/mit/zed',
                'excludePattern' : exclude,
                'replaceAssets'  : false,
                'minify'         : false
            });
        },
        
        tearDown: function() {
        },

        testCollectFiles: function () {
            // testGetFiles tests basic functionality of collectFiles()
            // only testing include/exclude arguments here
            var path = './tests/assets/',
                regex = 'test\.css',
                incFiles = this.manifest.collectFiles(path, regex),
                count = 0;
            
            for (var i=0; i < incFiles.length; i++) {
                if (undefined != incFiles[i]) {
                    count++;
                }
            }
            A.areEqual(1, count);

            var excFiles = this.manifest.collectFiles(path, '', regex);
            count = 0;
            for (var i=0; i < excFiles.length; i++) {
                if (undefined != excFiles[i]) {
                    count++;
                }
            }
            A.areEqual(NUM_FILES-1, count);
        },

        testGetFileInfo: function() {
            var self = this,
                manifest = self.manifest,
                files,
                filename,
                file;
            
            manifest.getFiles(function(files)
            {
                // resume wait
                self.resume(function()
                {
                    filename = manifest._files[0];
                    isStr(filename, 'Expected a first file to be string.');
                    file = files[filename];
                    isObj(file);
                    eq('css', file.ext);
                    eq('test.css', file.filename);
                    eq('/static/test/assets/css/test.css', file.name);
                    eq(file.name, file.local);
                    eq('http://l.yimg.com/os/mit/zed/j/group/test/test-877.css', file.remote);
                });
            });
            
            // allow the test to complete within callback
            // consider failure if not resumed within 15 sec
            self.wait(1500);
        },

        testGetFileInfoNoGroup: function() {
            var self = this,
                manifest,
                files,
                file;
            
            self.setUp('mojit', '');
            manifest = self.manifest, // create closure
            manifest.getFiles(function(files)
            {
                // resume wait
                self.resume(function()
                {
                    filename = manifest._files[0];
                    file = files[filename];
                    eq('js', file.ext);
                    eq('lib.js', file.filename);
                    eq('/static/test/assets/js/lib.js', file.name);
                    eq(file.name, file.local);
                    eq('http://l.yimg.com/os/mit/zed/j/test/lib-877.js', file.remote);
                });
            });
            
            // allow the test to complete within callback
            // consider failure if not resumed within 15 sec
            self.wait(1500);
        },

        testGetFileInfoApp: function() {
            var self = this,
                manifest,
                files,
                file;
            
            self.setUp('app');
            manifest = self.manifest, // create closure
            manifest.getFiles(function(files)
            {
                // resume wait
                self.resume(function()
                {
                    eq(3, Y.Object.size(files));
                    
                    filename = manifest._files[1];
                    file = files[filename];
                    eq('js', file.ext);
                    eq('gallery_strings_pt-BR.js', file.filename);
                    // generic_name
                    eq('/static/assets/js/l10n/gallery_strings.js', file.name);
                    eq('/static/assets/js/l10n/gallery_strings_pt-BR.js', file.local);
                    eq('region=any&lang=pt-BR', file.opts.dimensions);
                    
                    filename = manifest._files[2];
                    file = files[filename];
                    eq('dimensions.js', file.filename);
                    eq('/static/assets/js/dimensions.js', file.name);
                    eq('["foo:bar,bat:baz","quuz:bar"]', enc(file.opts.dimensions));
                    eq('http://l.yimg.com/os/mit/zed/dimensions-877.js', file.remote);
                });
            });
            
            // allow the test to complete within callback
            // consider failure if not resumed within 15 sec
            self.wait(1500);
        },

        testGetFileExtension: function() {
            A.areEqual('js', this.manifest.getFileExtension('/tmp/file.js'));
            A.areEqual('js', this.manifest.getFileExtension('file.JS'));
        },

        testStripFileExtension: function () {
            A.areEqual('/tmp/file', this.manifest.stripFileExtension('/tmp/file.js'));
        }, 

        testParseDirectives: function () {
            directives = this.manifest.parseDirectives('./tests/assets/js/l10n/gallery_strings_pt-BR.js');
            A.areEqual('region=any&lang=pt-BR', directives['dimensions']);
        },

        testAppendSlash: function () {
            A.areEqual('/tmp/', this.manifest.appendSlash('/tmp'));
        },

        testShortenPath: function() {
            A.areEqual('/page/page_frame/test.css', this.manifest.shortenPath('/static/page/page_frame/assets/css/test.css'));
            A.areEqual('/media/j/', this.manifest.shortenPath('/media/mojits/'));
        },
    
        testGetOption: function () {
            A.areEqual('/static', this.manifest.getOption('localPrefix'));
            A.areEqual('group', this.manifest.getOption('group'));
        },
    
        testGetFilePrefix: function () {
            A.areEqual('/static/test/', this.manifest.getFilePrefix());
            A.areEqual('/static/mojits/group/test/', this.manifest.getFilePrefix(true));
        },

        testMax: function () {
            A.areEqual(25, this.manifest.max([25,17,1,5,3]));
            A.areNotEqual(25, this.manifest.max([10,66,29,344]));
        },

        testArrayKeyExists: function () {
            A.areEqual(true, this.manifest.array_key_exists('key3', {'key1':1, 'key2':2, 'key3':3, 'key4': 4}));
            A.areEqual(false, this.manifest.array_key_exists('key6', {'key1':1, 'key2':2, 'key3':3, 'key4': 4}));
        },

        testInarray: function () {
            A.areEqual(true, this.manifest.in_array(10, [199,20,10,34,99]));
            A.areEqual(false, this.manifest.in_array(11, [199,20,10,34,99]));
        },

        testGetRemotePath: function () {
            A.areEqual('http://l.yimg.com/os/mit/zed/j/group/test/test-1111.css',
                this.manifest.getRemotePath({filename: 'test.css', path: '/static/group/test/assets/css/test.css'}, 1111));
        },

        testGetRevision: function () {
            var that = this;
            var file = 'tests/assets/js/l10n/gallery_strings_pt-BR.js';
            var rev  = 1440;
            this.manifest._files = [];
            this.manifest._files.push(file);
            this.manifest.getRevision(function() {
                 that.resume(function(){
                     A.areEqual(rev, this.manifest._revisions[file]);
                 });
            });

            //wait until resume() is called
            this.wait();
        },

        testGetFiles: function() {
            var that  = this; 
            this.manifest.getFiles(function(files){
                var numOfFiles = 0;
                for (var i in files) {
                    if (files.hasOwnProperty(i)) {
                       numOfFiles++;
                    }
                } 
                that.resume(function(){
                     A.areEqual(1, numOfFiles);
                });
            });

            //wait until resume() is called
            this.wait();
        },

        testWriteToFile: function() {
            var file = '/tmp/this.manifest.json';
            result = this.manifest.writeToFile(file, '');
            fs = require('fs');
            fileExists = false
            try {
                stat = fs.statSync(file); 
                if (stat.isFile()) {
                    fileExists = true;
                }
            } catch(ex){}
            fs.unlinkSync(file);
            A.areNotEqual(false, fileExists);
        },

        testMkdirP: function() {
            var dir = '/tmp/dir/manifest';
            result = this.manifest.mkdirP(dir);
            fs = require('fs');
            dirExists = false
            try {
                stat = fs.statSync(dir); 
                if (stat.isDirectory()) {
                    dirExists = true;
                }
            } catch(ex){}
            fs.rmdirSync(dir);
            fs.rmdirSync('/tmp/dir');
            A.areNotEqual(false, dirExists);
        },

        testBuildConfigData: function () {
            var self = this,
                file = 'tests/assets/js/l10n/gallery_strings_pt-BR.js';
            
            self.manifest._files = [file];
            
            self.manifest.getRevision(function()
            {
               filesInfo = self.manifest.getFileInfo();
               var rev = self.manifest._revisions[file];
               var directives = self.manifest.parseDirectives(file);
               if (!self.manifest.array_key_exists('use_local_path', directives)) {
                   filesInfo[file]['remote'] = self.manifest.getRemotePath(filesInfo[file], rev);
               }
               filesInfo[file]['rev'] = rev;
               filesInfo[file]['comment'] = filesInfo[file]['filename'] + ' ' + rev;

               var confData = JSON.parse(self.manifest.buildConfigData('outputfile.json', filesInfo));
               self.resume(function(){
                   var confEntry = confData.shift();
                   A.areEqual('asset_mode:prod', confEntry['settings'][0].toString());
                   confEntry = confData.shift();
                   A.areEqual('asset_mode:dev', confEntry["settings"][0].toString());
               });
            });

            //wait until resume() is called
            self.wait();

            A.areEqual(prefix + '/media/m/zed/test-1111.css', self.manifest.getRemotePath('/media/modules/zed/assets/css/test.css', 1111));
        },
    }));

    YUITest.TestRunner.add(suite);

}, '0.0.1', {requires: ['mojito-test']});

